{
    Copyright (C) 2024 VCC
    creation date: 26 Sep 2023
    initial release date: 24 Mar 2024

    author: VCC
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}


program MQTTClientApp;

uses
  MQTTUtils, MQTTClient;
  
  
type
  PSOCKET_Intern_Dsc = ^SOCKET_Intern_Dsc;


var
  MQTTToEthFIFO: TDynArrayOfTDynArrayOfByte;
  EthToMQTTFIFO: TDynArrayOfTDynArrayOfByte;
  RecFIFO: TDynArrayOfByte;  //filled in by Eth handler with raw data
  
const
  HEAP_START: DWord = $A0000FDC;
  HEAP_SIZE: DWord = 40000;

var
  MainCounter: Byte;

var
  MyMacAddr   : array[6] of byte; // my MAC address
  MyIpAddr    : array[4] of byte; // my IP address
  GWIpAddr    : array[4] of byte; // gateway (router) IP address
  IpMask      : array[4] of byte; // network mask (for example : 255.255.255.0)
  DnsIpAddr   : array[4] of byte; // DNS server IP address

//Parts of the code come from mikromedia example. Other parts are generated by mikroPascal.  (pin definitions and hardware init code)

var
  LED_R: sbit at LATD.1;
  LED_G: sbit at LATD.2;
  LED_B: sbit at LATD.3;

  LED_G_On: bit;

  UpdateSeconds: Boolean;
  HasDataToSend: Boolean;
  FirstSocket: PSOCKET_Intern_Dsc;
  MQTTConnected: array[0..9] of Boolean; //one item / socket
  


//Timer1 and PHY code from mikroe example
procedure Timer1Init;
begin
  TMR1 := 0;                 // reset timer value to zero
  PR1 := 65535;              // Load period register

  T1IP0_bit := 1;            // set interrupt
  T1IP1_bit := 1;            // priority
  T1IP2_bit := 1;            // to 7

  TCKPS0_bit := 1;           // Set Timer Input Clock
  TCKPS1_bit := 1;           // Prescale value to 1:256
  EnableInterrupts();        // Enable all interrupts

  T1IE_bit := 1;             // Enable Timer1 Interrupt
  ON__T1CON_bit := 1;        // Enable Timer1
end;

var
  timer_tmp1: Byte;

procedure Timer1Int; iv IVT_TIMER_1; ilevel 7; ics ICS_SRS;
begin
  Inc(timer_tmp1);
  if timer_tmp1 = 5 then
  begin //1s
    timer_tmp1 := 0;
    Net_Ethernet_Intern_UserTimerSec := Net_Ethernet_Intern_UserTimerSec + 1;
    UpdateSeconds := True;
  end;

  if LED_G = 1 then
  begin
    if LED_G_On = 0 then
      LED_G_On := 1
    else
    begin
      LED_G := 0;
      LED_G_On := 0;
    end;
  end;

  TMR1 := 0;
  T1IF_bit := 0; // clear interrupt flag

  asm
    EI;
  end;
end;

  
procedure InitPHYPins;
begin
  TRISD11_bit := 0;   // ETH_ALT_MDC_BIT
  TRISD8_bit := 1;    // ETH_ALT_MDIO_BIT

  TRISA15_bit := 0;   // ETH_ALT_TXEN_BIT
  TRISD14_bit := 0;   // ETH_ALT_TXD0_BIT
  TRISD15_bit := 0;   // ETH_ALT_TXD1_BIT

  TRISG9_bit := 1;    // ETH_ALT_RXCLK_BIT
  TRISG8_bit := 1;    // ETH_ALT_RXDV_BIT
  TRISE8_bit := 1;    // ETH_ALT_RXD0_BIT
  TRISE9_bit := 1;    // ETH_ALT_RXD1_BIT
  TRISG15_bit:= 1;    // ETH_ALT_RXERR_BIT
end;


procedure InitRGBLED;
begin
  TRISD.1 := 0;
  TRISD.2 := 0;
  TRISD.3 := 0;
  LED_R := 0;
  LED_G := 0;
  LED_B := 0;
end;


procedure Init_MCU;
var
  i, n: Byte;
begin
  AD1PCFG := 0xFFFF;
  JTAGEN_bit := 0;
  // If bus is busy wait SDA high before initializing I2C module
  TRISA2_bit := 0;
  TRISA3_bit := 1;
  LATA2_bit := 1;
  while (PORTA.B3 = 0) do
  begin
    LATA2_bit := 0;
    Delay_us(10);
    LATA2_bit := 1;
    Delay_us(10);
  end;

  InitRGBLED;

  MainCounter := 0;
  LED_G_On := 0;

  Timer1Init;
  InitPHYPins;

  HasDataToSend := False;

  n := SizeOf(MQTTConnected) shr CArchBitShift;
  for i := 0 to n - 1 do
    MQTTConnected[i] := False;

  UART1_Init(256000);    //FT232R
  TRISF.2 := 1; //U1RX
  TRISF.8 := 0; //U1TX
end;


procedure AddToLog(var AMsg: string[100000]);
begin
  UART1_Write_Text(AMsg);
  UART1_Write(#13);
  UART1_Write(#10);
end;


procedure SendPacketToServer(ClientInstance: DWord);
var
  BufferPointer: PMQTTBuffer;
  Err: Word;
begin
  BufferPointer := MQTT_GetClientToServerBuffer(ClientInstance, Err){$IFnDEF SingleOutputBuffer}^.Content^[0]{$ENDIF};

  if not AddDynArrayOfByteToDynOfDynOfByte(MQTTToEthFIFO, BufferPointer^) then
    AddToLog('Not enough memory in SendPacketToServer');

  {$IFnDEF SingleOutputBuffer}
    if not MQTT_RemovePacketFromClientToServerBuffer(ClientInstance) then
      AddToLog('Can''t remove latest packet from send buffer.');
  {$ELSE}
    AddToLog('MQTT_RemovePacketFromClientToServerBuffer not implemented for SingleOutputBuffer.');
  {$ENDIF}
  
  Net_Ethernet_Intern_startSendTCP(@socket_Intern[ClientInstance and $FFFF]);
end;


procedure HandleOnMQTTError(ClientInstance: DWord; AErr: Word; APacketType: Byte);
var
  PacketTypeStr: string[13];
begin
  MQTTPacketToString(APacketType, PacketTypeStr);
  AddToLog('  PacketType: (' + PacketTypeStr + ').');

  if Hi(AErr) = CMQTT_Reason_NotAuthorized then   // $87
  begin
    AddToLog('Server error: Not authorized.');
    if APacketType = CMQTT_CONNACK then
      AddToLog(' on receiving CONNACK.');
  end;

  if Lo(AErr) = CMQTT_PacketIdentifierNotFound_ClientToServer then   // $CE
    AddToLog('Client error: PacketIdentifierNotFound.');
    
  if Lo(AErr) = CMQTT_UnhandledPacketType then   // $CA
    AddToLog('Client error: UnhandledPacketType.');  //Usually appears when an incomplete packet is received, so the packet type by is 0.
    
  if Lo(AErr) = CMQTT_OutOfMemory then
    LED_R := 1;
end;


procedure HandleOnSend_MQTT_Packet(ClientInstance: DWord; APacketType: Byte);
var
  PacketName: string[13];
begin
  MQTTPacketToString(APacketType, PacketName);
  AddToLog('Sending ' + PacketName + ' packet...');

  SendPacketToServer(ClientInstance);
end;


function HandleOnBeforeMQTT_CONNECT(ClientInstance: DWord;  //The lower byte identifies the client instance (the library is able to implement multiple MQTT clients / device). The higher byte can identify the call in user handlers for various events (e.g. TOnBeforeMQTT_CONNECT).
                                    var AConnectFields: TMQTTConnectFields;                    //user code has to fill-in this parameter
                                    var AConnectProperties: TMQTTConnectProperties;
                                    ACallbackID: Word): Boolean;
var
  TempWillProperties: TMQTTWillProperties;
  UserName, Password: string[30];
  //ClientId: string;
  //Id: Char;
  ConnectFlags: Byte;
  EnabledProperties: Word;
begin
  Result := True;
  AddToLog('Preparing CONNECT data..');

  //Id := Chr((ClientInstance and $FF) + 48);
  //ClientId := 'MyClient' + Id;
  UserName := 'Username'; //'MyUsername';
  Password := 'je4-5o9gjsw45yjuT954it23r'; //'MyPassword';

  //StringToDynArrayOfByte(ClientId, AConnectFields.PayloadContent.ClientID);
  StringToDynArrayOfByte(UserName, AConnectFields.PayloadContent.UserName);
  StringToDynArrayOfByte(Password, AConnectFields.PayloadContent.Password);

  ConnectFlags := CMQTT_UsernameInConnectFlagsBitMask or
                  CMQTT_PasswordInConnectFlagsBitMask or
                  CMQTT_CleanStartInConnectFlagsBitMask {or
                  CMQTT_WillQoSB1InConnectFlagsBitMask};

  EnabledProperties := CMQTTConnect_EnSessionExpiryInterval or
                       CMQTTConnect_EnRequestResponseInformation or
                       CMQTTConnect_EnRequestProblemInformation {or
                       CMQTTConnect_EnAuthenticationMethod or
                       CMQTTConnect_EnAuthenticationData};

  MQTT_InitWillProperties(TempWillProperties);
  TempWillProperties.WillDelayInterval := 30; //some value
  TempWillProperties.PayloadFormatIndicator := 1;  //0 = do not send.  1 = UTF-8 string
  TempWillProperties.MessageExpiryInterval := 3600;
  StringToDynArrayOfByte('SomeType', TempWillProperties.ContentType);
  StringToDynArrayOfByte('SomeTopicName', TempWillProperties.ResponseTopic);
  StringToDynArrayOfByte('MyCorrelationData', TempWillProperties.CorrelationData);
  
  {$IFDEF EnUserProperty}
    AddStringToDynOfDynArrayOfByte('Key=Value', TempWillProperties.UserProperty);
    AddStringToDynOfDynArrayOfByte('NewKey=NewValue', TempWillProperties.UserProperty);
  {$ENDIF}

  FillIn_PayloadWillProperties(TempWillProperties, AConnectFields.PayloadContent.WillProperties);
  MQTT_FreeWillProperties(TempWillProperties);
  StringToDynArrayOfByte('WillTopic', AConnectFields.PayloadContent.WillTopic);

  //Please set the Will Flag in ConnectFlags below, then uncomment above code, if "Will" properties are required.
  AConnectFields.ConnectFlags := ConnectFlags;  //bits 7-0:  User Name, Password, Will Retain, Will QoS, Will Flag, Clean Start, Reserved
  AConnectFields.EnabledProperties := EnabledProperties;
  AConnectFields.KeepAlive := 0; //any positive values require pinging the server if no other packet is being sent

  AConnectProperties.SessionExpiryInterval := 3600; //[s]
  AConnectProperties.ReceiveMaximum := 7000;
  AConnectProperties.MaximumPacketSize := 10 * 1024 * 1024;
  AConnectProperties.TopicAliasMaximum := 100;
  AConnectProperties.RequestResponseInformation := 1;
  AConnectProperties.RequestProblemInformation := 1;
  
  {$IFDEF EnUserProperty}
    AddStringToDynOfDynArrayOfByte('UserProp=Value', AConnectProperties.UserProperty);
  {$ENDIF}
  
  StringToDynArrayOfByte('SCRAM-SHA-1', AConnectProperties.AuthenticationMethod);       //some example from spec, pag 108   the server may add to its log: "bad AUTH method"
  StringToDynArrayOfByte('client-first-data', AConnectProperties.AuthenticationData);   //some example from spec, pag 108

  AddToLog('Done preparing CONNECT data..');
  AddToLog('');
end;


procedure HandleOnAfterMQTT_CONNACK(ClientInstance: DWord; var AConnAckFields: TMQTTConnAckFields; var AConnAckProperties: TMQTTConnAckProperties);
var
  n, i: Integer;
  ConnectionAccepted: Boolean;
begin
  AddToLog('Received CONNACK');
  
  ConnectionAccepted := AConnAckFields.ConnectReasonCode = 0;
  MQTTConnected[ClientInstance and $FFFF] := ConnectionAccepted;
  
  if ConnectionAccepted then
    AddToLog('Connection accepted by broker')
  else
    AddToLog('Connection rejected by broker');
end;


function HandleOnBeforeSendingMQTT_SUBSCRIBE(ClientInstance: DWord;  //The lower word identifies the client instance
                                             var ASubscribeFields: TMQTTSubscribeFields;
                                             var ASubscribeProperties: TMQTTSubscribeProperties;
                                             ACallbackID: Word): Boolean;
var
  Options, QoS: Byte;
  SubId: Word;
begin
  Options := 0;
  QoS := 2;

  Options := Options or QoS; //bits 1 and 0
  //Bit 2 of the Subscription Options represents the No Local option.  - spec pag 73
  //Bit 3 of the Subscription Options represents the Retain As Published option.  - spec pag 73
  //Bits 4 and 5 of the Subscription Options represent the Retain Handling option.  - spec pag 73
  //Bits 6 and 7 of the Subscription Options byte are reserved for future use. - Must be set to 0.  - spec pag 73

                                                                            //Subscription identifiers are not mandatory (per spec).
  SubId := MQTT_CreateClientToServerSubscriptionIdentifier(ClientInstance); //This function has to be called here, in this handler only. The library does not call this function other than for init purposes.
                                                                            //If SubscriptionIdentifiers are used, then user code should free them when resubscribing or when unsubscribing.
  ASubscribeProperties.SubscriptionIdentifier := SubId;  //For now, the user code should keep track of these identifiers and free them on resubscribing or unsubscribing.

  Result := FillIn_SubscribePayload('abc', Options, ASubscribeFields.TopicFilters);  //call this again with a different string (i.e. TopicFilter), in order to add it to ASubscribeFields.TopicFilters
  if not Result then
  begin
    AddToLog('HandleOnBeforeSendingMQTT_SUBSCRIBE not enough memory to add TopicFilters.');
    Exit;
  end;

  //Enable SubscriptionIdentifier only if required (allocated above with CreateClientToServerSubscriptionIdentifier) !!!
  //The library initializes EnabledProperties to 0.
  //A subscription is allowed to be made without a SubscriptionIdentifier.
  ASubscribeFields.EnabledProperties := CMQTTSubscribe_EnSubscriptionIdentifier {or CMQTTSubscribe_EnUserProperty};

  AddToLog('');
end;


procedure HandleOnAfterReceivingMQTT_SUBACK(ClientInstance: DWord; var ASubAckFields: TMQTTSubAckFields; var ASubAckProperties: TMQTTSubAckProperties);
var
  i: Integer;
begin
  AddToLog('Received SUBACK');

  AddToLog('');
end;


function HandleOnBeforeSendingMQTT_UNSUBSCRIBE(ClientInstance: DWord;  //The lower word identifies the client instance
                                               var AUnsubscribeFields: TMQTTUnsubscribeFields;
                                               var AUnsubscribeProperties: TMQTTUnsubscribeProperties;
                                               ACallbackID: Word): Boolean;
begin
  Result := FillIn_UnsubscribePayload('abc', AUnsubscribeFields.TopicFilters);  //call this again with a different string (i.e. TopicFilter), in order to add it to AUnsubscribeFields.TopicFilters
  if not Result then
  begin
    AddToLog('HandleOnBeforeSendingMQTT_UNSUBSCRIBE not enough memory to add TopicFilters.');
    Exit;
  end;

  //the user code should call RemoveClientToServerSubscriptionIdentifier to remove the allocated identifier.
end;


procedure HandleOnAfterReceivingMQTT_UNSUBACK(ClientInstance: DWord; var AUnsubAckFields: TMQTTUnsubAckFields; var AUnsubAckProperties: TMQTTUnsubAckProperties);
var
  i: Integer;
begin
  AddToLog('Received UNSUBACK');

  AddToLog('');
end;


//This handler is used when this client publishes a message to broker.
function HandleOnBeforeSendingMQTT_PUBLISH(ClientInstance: DWord;  //The lower word identifies the client instance (the library is able to implement multiple MQTT clients / device). The higher byte can identify the call in user handlers for various events (e.g. TOnBeforeMQTT_CONNECT).
                                           var APublishFields: TMQTTPublishFields;                    //user code has to fill-in this parameter
                                           var APublishProperties: TMQTTPublishProperties;            //user code has to fill-in this parameter
                                           ACallbackID: Word): Boolean;
var
  Msg: string[20];
  QoS: Byte;
begin
  Result := True;
  Msg := 'SomeMessage';

  QoS := 2;

  Result := Result and StringToDynArrayOfByte(Msg, APublishFields.ApplicationMessage);
  Result := Result and StringToDynArrayOfByte('abc', APublishFields.TopicName);

  AddToLog('');
  //QoS can be overriden here. If users override QoS in this handler, then a a different PacketIdentifier might be allocated (depending on what is available)
end;


//This handler is used when this client publishes a message to broker and the broker responds with PUBACK.
procedure HandleOnBeforeSendingMQTT_PUBACK(ClientInstance: DWord; var APubAckFields: TMQTTPubAckFields; var APubAckProperties: TMQTTPubAckProperties);
begin
  AddToLog('Acknowledging with PUBACK');

  AddToLog('');
  //This handler can be used to override what is being sent to server as a reply to PUBLISH
end;


procedure HandleOnAfterReceivingMQTT_PUBACK(ClientInstance: DWord; var APubAckFields: TMQTTPubAckFields; var APubAckProperties: TMQTTPubAckProperties);
begin
  AddToLog('Received PUBACK');

  AddToLog('');
end;


procedure HandleOnAfterReceivingMQTT_PUBLISH(ClientInstance: DWord; var APublishFields: TMQTTPublishFields; var APublishProperties: TMQTTPublishProperties);
var
  QoS: Byte;
  ID: Word;
  Topic, Msg: string[300];
  IDstr: string[6];
  QoSStr: string[3];
  i: Integer;
begin
  QoS := (APublishFields.PublishCtrlFlags shr 1) and 3;
  ByteToStr(QoS, QoSStr);
  DynArrayOfByteToString(APublishFields.ApplicationMessage, Msg);
  
  ID := APublishFields.PacketIdentifier;
  WordToStr(ID, IDstr);
  
  DynArrayOfByteToString(APublishFields.TopicName, Topic);

  AddToLog('Received PUBLISH  ServerPacketIdentifier: ' + IDstr +
                                                 '  Msg: ' + Msg +
                                                 '  QoS: ' + QoSStr +
                                                 '  TopicName: ' + Topic);

  AddToLog('');
end;


procedure HandleOnBeforeSending_MQTT_PUBREC(ClientInstance: DWord; var ATempPubRecFields: TMQTTPubRecFields; var ATempPubRecProperties: TMQTTPubRecProperties);
begin
  AddToLog('Acknowledging with PUBREC');
end;


procedure HandleOnAfterReceiving_MQTT_PUBREC(ClientInstance: DWord; var ATempPubRecFields: TMQTTPubRecFields; var ATempPubRecProperties: TMQTTPubRecProperties);
begin
  AddToLog('Received PUBREC' );
end;


//Sending PUBREL after the PUBREC response from server, after the client has sent a PUBLISH packet with QoS=2.
procedure HandleOnBeforeSending_MQTT_PUBREL(ClientInstance: DWord; var ATempPubRelFields: TMQTTPubRelFields; var ATempPubRelProperties: TMQTTPubRelProperties);
begin
  AddToLog('Acknowledging with PUBREL');
end;


procedure HandleOnAfterReceiving_MQTT_PUBREL(ClientInstance: DWord; var ATempPubRelFields: TMQTTPubRelFields; var ATempPubRelProperties: TMQTTPubRelProperties);
begin
  AddToLog('Received PUBREL');
end;


procedure HandleOnBeforeSending_MQTT_PUBCOMP(ClientInstance: DWord; var ATempPubCompFields: TMQTTPubCompFields; var ATempPubCompProperties: TMQTTPubCompProperties);
begin
  AddToLog('Acknowledging with PUBCOMP');
end;


procedure HandleOnAfterReceiving_MQTT_PUBCOMP(ClientInstance: DWord; var ATempPubCompFields: TMQTTPubCompFields; var ATempPubCompProperties: TMQTTPubCompProperties);
begin
  AddToLog('Received PUBCOMP');
end;


procedure HandleOnAfterReceivingMQTT_PINGRESP(ClientInstance: DWord);
begin
  AddToLog('Received PINGRESP');
end;


procedure HandleOnBeforeSendingMQTT_DISCONNECT(ClientInstance: DWord;  //The lower word identifies the client instance
                                               var ADisconnectFields: TMQTTDisconnectFields;
                                               var ADisconnectProperties: TMQTTDisconnectProperties;
                                               ACallbackID: Word);
begin
  AddToLog('Sending DISCONNECT');
  //ADisconnectFields.EnabledProperties := CMQTTDisconnect_EnSessionExpiryInterval;   //uncomment if needed
  //ADisconnectProperties.SessionExpiryInterval := 1;
  MQTTConnected[ClientInstance and $FFFF] := False;
end;


procedure HandleOnAfterReceivingMQTT_DISCONNECT(ClientInstance: DWord;  //The lower word identifies the client instance
                                                var ADisconnectFields: TMQTTDisconnectFields;
                                                var ADisconnectProperties: TMQTTDisconnectProperties);
begin
  AddToLog('Received DISCONNECT');
end;


procedure HandleOnBeforeSendingMQTT_AUTH(ClientInstance: DWord;  //The lower word identifies the client instance
                                         var AAuthFields: TMQTTAuthFields;
                                         var AAuthProperties: TMQTTAuthProperties;
                                         ACallbackID: Word);
begin
  AddToLog('Sending AUTH');
  AAuthFields.AuthReasonCode := $19; //Example: reauth   - see spec, pag 108.

  StringToDynArrayOfByte('SCRAM-SHA-1', AAuthProperties.AuthenticationMethod);       //some example from spec, pag 108
  StringToDynArrayOfByte('client-second-data', AAuthProperties.AuthenticationData);   //some modified example from spec, pag 108
end;


procedure HandleOnAfterReceivingMQTT_AUTH(ClientInstance: DWord;  //The lower word identifies the client instance
                                          var AAuthFields: TMQTTAuthFields;
                                          var AAuthProperties: TMQTTAuthProperties);
begin
  AddToLog('Received AUTH');
end;


procedure SyncReceivedBuffer(var AReadBuf: TDynArrayOfByte);
begin
  if not AddDynArrayOfByteToDynOfDynOfByte(EthToMQTTFIFO, AReadBuf) then
    AddToLog('Out of memory on adding to ReceivedBuffer FIFO.');
end;


const
  CSocket0 = 0;

var
  TempReadBuf: TDynArrayOfByte;  //This is a global var on MCU, because Net_Ethernet_Intern_UserTCP adds to it over multiple calls.
                                            //Every outer item is allocated for a socket.
procedure RecFIFOToMQTT;
var
  ExactPacket: TDynArrayOfByte;
  TempByte: Byte;
  PacketName: string[30];
  PacketSize: DWord;
  LoggedDisconnection: Boolean;
  TempArr: TDynArrayOfByte;
  SuccessfullyDecoded, SuccessfullyRead: Boolean;
  ProcessBufferLengthResult: Word;
begin
  //InitDynOfDynOfByteToEmpty(TempReadBuf); //Do not initialize here! The content of this array is accumulated over multiple calls to Net_Ethernet_Intern_UserTCP
  SuccessfullyRead := False;
  repeat
    if RecFIFO.Len = 0 then    // An IOHandler.ReadByte call would throw an exception when attempting to read more that available.
      Exit;

    TempByte := RecFIFO.Content^[0];
    if not RemoveStartBytesFromDynArray(1, RecFIFO) then
    begin
      AddToLog('Out of memory when removing a byte from RecFIFO.');
      Exit;
    end;

    if not AddByteToDynArray(TempByte, TempReadBuf) then
    begin
      HandleOnMQTTError(0, CMQTT_UserError, CMQTT_UNDEFINED);
      AddToLog('Cannot allocate buffer when reading.');
      FreeDynArray(TempReadBuf);
    end
    else
    begin
      SuccessfullyDecoded := True;                                         //PacketSize should be the expected size, which can be greater than TempReadBuf.Len
      ProcessBufferLengthResult := MQTT_ProcessBufferLength(TempReadBuf, PacketSize);

      if ProcessBufferLengthResult <> CMQTTDecoderNoErr then
        SuccessfullyDecoded := False
      else
        if ProcessBufferLengthResult = CMQTTDecoderIncompleteBuffer then  //PacketSize is successfully decoded, but the packet is incomplete
        begin
          //to get a complete packet, the number of bytes to be read next is PacketSize - TempReadBuf.Content^[CSocket0]^.Len.

          if RecFIFO.Len < PacketSize - TempReadBuf.Len then    // An IOHandler.ReadBytes call would throw an exception when attempting to read more that available.
            Exit;

          InitDynArrayToEmpty(TempArr);
          CopyFromDynArray(TempArr, RecFIFO, 0, PacketSize - TempReadBuf.Len);

          if not RemoveStartBytesFromDynArray(TempArr.Len, RecFIFO) then
          begin
            AddToLog('Out of memory when removing a byte from RecFIFO.');
            Exit;
          end;

          if TempArr.Len > 0 then   //it should be >0, otherwise this loop wouldn't have been executed
            if not ConcatDynArrays(TempReadBuf, TempArr) then
            begin
              AddToLog('Out of memory on allocating TempReadBuf, for multiple bytes.');
              FreeDynArray(TempReadBuf);
            end
            else
            begin
              ProcessBufferLengthResult := MQTT_ProcessBufferLength(TempReadBuf, PacketSize);
              SuccessfullyDecoded := ProcessBufferLengthResult <> CMQTTDecoderNoErr;
            end;

          FreeDynArray(TempArr);
        end;

      if SuccessfullyDecoded then
      begin
        MQTTPacketToString(TempReadBuf.Content^[0], PacketName);
        AddToLog('done receiving packet:');
        AddToLog(PacketName);

        if PacketSize <> TempReadBuf.Len then
        begin
          if CopyFromDynArray(ExactPacket, TempReadBuf, 0, PacketSize) then
          begin
            SyncReceivedBuffer(ExactPacket);
            FreeDynArray(ExactPacket);
            if not RemoveStartBytesFromDynArray(PacketSize, TempReadBuf) then
              AddToLog('Cannot remove processed packet from TempReadBuf.');
          end
          else
            AddToLog('Out of memory on allocating ExactPacket.');
        end
        else
        begin
          SyncReceivedBuffer(TempReadBuf);   //MQTT_Process returns an error for unknown and incomplete packets
          FreeDynArray(TempReadBuf);   //freed here, only when a valid packet is formed
        end;

        //Sleep(1);
      end; //SuccessfullyDecoded
    end;

  until SuccessfullyRead;
end;


procedure Net_Ethernet_Intern_UserTCP(socket: PSOCKET_Intern_Dsc);   //callback for receiving data
var
  Arr: TDynArrayOfByte;
  s: string[30];
begin
  if socket^.dataLength > 0 then
  begin
    InitDynArrayToEmpty(Arr);
    if not SetDynLength(Arr, socket^.dataLength) then
    begin
      HandleOnMQTTError(socket^.ID, CMQTT_OutOfMemory, 0);
      Exit;
    end;

    Net_Ethernet_Intern_getBytes(PByte(Arr.Content), $FFFF, Arr.Len);

    if not ConcatDynArrays(RecFIFO, Arr) then
      HandleOnMQTTError(socket^.ID, CMQTT_OutOfMemory, 0);

    FreeDynArray(Arr);
    RecFIFOToMQTT;
  end;

  if MQTTToEthFIFO.Len > 0 then
  begin
    if Net_Ethernet_Intern_bufferEmptyTCP(socket) = 1 then //1 = buffer empty
    begin
      HasDataToSend := True;

      AddToLog('------- Sending data to Eth of ');
      LongWordToStr(MQTTToEthFIFO.Content^[0]^.Len, s);
      strcat(s, ' bytes');
      AddToLog(s);
      //DynArrayOfByteToString(MQTTToEthFIFO.Content^[0]^, s);
      //AddToLog(s);
      
      Net_Ethernet_Intern_putBytesTCP(DWord(MQTTToEthFIFO.Content^[0]^.Content), MQTTToEthFIFO.Content^[0]^.Len, socket);
      DeleteItemFromDynOfDynOfByte(MQTTToEthFIFO, 0);
    end
    else
      AddToLog('output buffer is full');
  end
  //else
  //  AddToLog('MQTTToEthFIFO.Len = 0');
end;


function Net_Ethernet_Intern_UserUDP(udpDsc: ^UDP_Intern_Dsc): Word;
begin
  Result := 0;
end;


procedure ProcessReceivedBuffer;  //called by a timer, or main loop, once in a while, to process received data
var
  TempBuf: TDynArrayOfByte;
begin
  if EthToMQTTFIFO.Len > 0 then
  begin
    InitDynArrayToEmpty(TempBuf);

    if MQTT_PutReceivedBufferToMQTTLib(0, EthToMQTTFIFO.Content^[0]^) then
    begin
      if not DeleteItemFromDynOfDynOfByte(EthToMQTTFIFO, 0) then
        AddToLog('Out of memory in ProcessReceivedBuffer.');

      MQTT_Process(0);
    end
    else
      AddToLog('Out of memory in ProcessReceivedBuffer.');

    FreeDynArray(TempBuf);
  end;
end;


procedure InitHandlers;
begin
  {$IFDEF IsDesktop}
    OnMQTTError^ := @HandleOnMQTTError;
    OnSendMQTT_Packet^ := @HandleOnSend_MQTT_Packet;
    OnBeforeMQTT_CONNECT^ := @HandleOnBeforeMQTT_CONNECT;
    OnAfterMQTT_CONNACK^ := @HandleOnAfterMQTT_CONNACK;
    OnBeforeSendingMQTT_PUBLISH^ := @HandleOnBeforeSendingMQTT_PUBLISH;
    OnBeforeSendingMQTT_PUBACK^ := @HandleOnBeforeSendingMQTT_PUBACK;
    OnAfterReceivingMQTT_PUBACK^ := @HandleOnAfterReceivingMQTT_PUBACK;
    OnAfterReceivingMQTT_PUBLISH^ := @HandleOnAfterReceivingMQTT_PUBLISH;
    OnBeforeSendingMQTT_PUBREC^ := @HandleOnBeforeSending_MQTT_PUBREC;
    OnAfterReceivingMQTT_PUBREC^ := @HandleOnAfterReceiving_MQTT_PUBREC;
    OnBeforeSendingMQTT_PUBREL^ := @HandleOnBeforeSending_MQTT_PUBREL;
    OnAfterReceivingMQTT_PUBREL^ := @HandleOnAfterReceiving_MQTT_PUBREL;
    OnBeforeSendingMQTT_PUBCOMP^ := @HandleOnBeforeSending_MQTT_PUBCOMP;
    OnAfterReceivingMQTT_PUBCOMP^ := @HandleOnAfterReceiving_MQTT_PUBCOMP;
    OnBeforeSendingMQTT_SUBSCRIBE^ := @HandleOnBeforeSendingMQTT_SUBSCRIBE;
    OnAfterReceivingMQTT_SUBACK^ := @HandleOnAfterReceivingMQTT_SUBACK;
    OnBeforeSendingMQTT_UNSUBSCRIBE^ := @HandleOnBeforeSendingMQTT_UNSUBSCRIBE;
    OnAfterReceivingMQTT_UNSUBACK^ := @HandleOnAfterReceivingMQTT_UNSUBACK;
    OnAfterReceivingMQTT_PINGRESP^ := @HandleOnAfterReceivingMQTT_PINGRESP;
    OnBeforeSendingMQTT_DISCONNECT^ := @HandleOnBeforeSendingMQTT_DISCONNECT;
    OnAfterReceivingMQTT_DISCONNECT^ := @HandleOnAfterReceivingMQTT_DISCONNECT;
    OnBeforeSendingMQTT_AUTH^ := @HandleOnBeforeSendingMQTT_AUTH;
    OnAfterReceivingMQTT_AUTH^ := @HandleOnAfterReceivingMQTT_AUTH;
  {$ELSE}
    OnMQTTError := @HandleOnMQTTError;
    OnSendMQTT_Packet := @HandleOnSend_MQTT_Packet;
    OnBeforeMQTT_CONNECT := @HandleOnBeforeMQTT_CONNECT;
    OnAfterMQTT_CONNACK := @HandleOnAfterMQTT_CONNACK;
    OnBeforeSendingMQTT_PUBLISH := @HandleOnBeforeSendingMQTT_PUBLISH;
    OnBeforeSendingMQTT_PUBACK := @HandleOnBeforeSendingMQTT_PUBACK;
    OnAfterReceivingMQTT_PUBACK := @HandleOnAfterReceivingMQTT_PUBACK;
    OnAfterReceivingMQTT_PUBLISH := @HandleOnAfterReceivingMQTT_PUBLISH;
    OnBeforeSendingMQTT_PUBREC := @HandleOnBeforeSending_MQTT_PUBREC;
    OnAfterReceivingMQTT_PUBREC := @HandleOnAfterReceiving_MQTT_PUBREC;
    OnBeforeSendingMQTT_PUBREL := @HandleOnBeforeSending_MQTT_PUBREL;
    OnAfterReceivingMQTT_PUBREL := @HandleOnAfterReceiving_MQTT_PUBREL;
    OnBeforeSendingMQTT_PUBCOMP := @HandleOnBeforeSending_MQTT_PUBCOMP;
    OnAfterReceivingMQTT_PUBCOMP := @HandleOnAfterReceiving_MQTT_PUBCOMP;
    OnBeforeSendingMQTT_SUBSCRIBE := @HandleOnBeforeSendingMQTT_SUBSCRIBE;
    OnAfterReceivingMQTT_SUBACK := @HandleOnAfterReceivingMQTT_SUBACK;
    OnBeforeSendingMQTT_UNSUBSCRIBE := @HandleOnBeforeSendingMQTT_UNSUBSCRIBE;
    OnAfterReceivingMQTT_UNSUBACK := @HandleOnAfterReceivingMQTT_UNSUBACK;
    OnAfterReceivingMQTT_PINGRESP := @HandleOnAfterReceivingMQTT_PINGRESP;
    OnBeforeSendingMQTT_DISCONNECT := @HandleOnBeforeSendingMQTT_DISCONNECT;
    OnAfterReceivingMQTT_DISCONNECT := @HandleOnAfterReceivingMQTT_DISCONNECT;
    OnBeforeSendingMQTT_AUTH := @HandleOnBeforeSendingMQTT_AUTH;
    OnAfterReceivingMQTT_AUTH := @HandleOnAfterReceivingMQTT_AUTH;
  {$ENDIF}
end;

  
procedure PrepareManualIPAndMAC(OptionIndex: Integer);
begin
  // set mac address
  myMacAddr[0] := 0x00;
  myMacAddr[1] := 0x14;
  myMacAddr[2] := 0xA5;
  myMacAddr[3] := 0x76;
  myMacAddr[4] := 0x19;
  myMacAddr[5] := 0x3F;

  // set IP address and gateway

  case OptionIndex of
    0:
    begin
      myIpAddr[0] := 192;
      myIpAddr[1] := 168;
      myIpAddr[2] := 0;
      myIpAddr[3] := 103;

      gwIpAddr[0]  := 192;
      gwIpAddr[1]  := 168;
      gwIpAddr[2]  := 0;
      gwIpAddr[3]  := 1;
    end;

    1:
    begin
      myIpAddr[0] := 192;
      myIpAddr[1] := 168;
      myIpAddr[2] := 1;
      myIpAddr[3] := 103;

      gwIpAddr[0]  := 192;
      gwIpAddr[1]  := 168;
      gwIpAddr[2]  := 1;
      gwIpAddr[3]  := 1;
    end;

    2:
    begin
      myIpAddr[0] := 10;
      myIpAddr[1] := 101;
      myIpAddr[2] := 14;
      myIpAddr[3] := 52;

      gwIpAddr[0]  := 10;
      gwIpAddr[1]  := 101;
      gwIpAddr[2]  := 14;
      gwIpAddr[3]  := 1;
    end;

    3:
    begin
      myIpAddr[0] := 192;
      myIpAddr[1] := 168;
      myIpAddr[2] := 15;
      myIpAddr[3] := 103;

      gwIpAddr[0]  := 192;
      gwIpAddr[1]  := 168;
      gwIpAddr[2]  := 15;
      gwIpAddr[3]  := 1;
    end;

    4:
    begin
      myIpAddr[0] := 192;
      myIpAddr[1] := 168;
      myIpAddr[2] := 6;
      myIpAddr[3] := 103;

      gwIpAddr[0]  := 192;
      gwIpAddr[1]  := 168;
      gwIpAddr[2]  := 6;
      gwIpAddr[3]  := 1;
    end;
  end;  //case

  // set dns address
  dnsIpAddr[0] := 1;
  dnsIpAddr[1] := 1;
  dnsIpAddr[2] := 1;
  dnsIpAddr[3] := 1;

  // set subnet mask
  ipMask[0]    := 255;
  ipMask[1]    := 255;
  ipMask[2]    := 255;
  ipMask[3]    := 0;
end;


procedure ManualIPAndMACConfiguration(OptionIndex: Integer);
begin
  PrepareManualIPAndMAC(OptionIndex);
  Net_Ethernet_Intern_confNetwork(@ipMask, @GWIpAddr, @DnsIpAddr);
end;


var 
  AssignedIpAddr, BrokerIPAddr: array[4] of Byte;  // user IP address buffer
  ProcCounter: DWord;
  ConRes: Byte;
  EthPort: Word;
  TempStr: string[10];
  
begin
  Delay_ms(100);
  
  InitDynOfDynOfByteToEmpty(MQTTToEthFIFO);
  InitDynOfDynOfByteToEmpty(EthToMQTTFIFO);
  InitDynArrayToEmpty(RecFIFO);
  InitDynArrayToEmpty(TempReadBuf);

  MM_Init;
  Init_MCU;
  
  MQTT_Init;
  if not MQTT_CreateClient then
    AddToLog('Can''t create client...');

  InitHandlers;

  PrepareManualIPAndMAC(0);
  Net_Ethernet_Intern_Init(@myMacAddr, @myIpAddr, Net_Eth_Int_AUTO_NEGOTIATION or Net_Eth_Int_DEFAULT_MAC or Net_Eth_Int_SPEED_100 or Net_Eth_Int_FULLDUPLEX);
  ManualIPAndMACConfiguration(0);
  Net_Ethernet_Intern_stackInitTCP;
  
  BrokerIPAddr[0] := 192;
  BrokerIPAddr[1] := 168;
  BrokerIPAddr[2] := 0;
  BrokerIPAddr[3] := 101;
  
  FirstSocket := nil; //do not set to @socket_Intern[0]; because Net_Ethernet_Intern_connectTCP will update FirstSocket (will update the pointer)

  MainCounter := 0;
  ProcCounter := 0;
  
  repeat
    Inc(MainCounter);
    Net_Ethernet_Intern_doPacket;

    memcpy(@AssignedIpAddr, Net_Ethernet_Intern_getIpAddress(), 4);
    
    if MainCounter >= 10 then
    begin
      MainCounter := 0;
      Inc(ProcCounter);
      if ProcCounter = 65535 then
        ProcCounter := 65534;
        
      ProcessReceivedBuffer;
    end;
    
    if ProcCounter = 2000 then
    begin
      Inc(ProcCounter);
      //EthPort := 2358;    //2358 is a simple TCP server for debugging
      EthPort := 1883;    //1883 is the MQTT port
      ConRes := Net_Ethernet_Intern_connectTCP(@BrokerIPAddr, EthPort, 20000, @FirstSocket);
      
      if ConRes <> 1 then
        AddToLog('Can''t connect to broker')
      else
      begin
        AddToLog('Connected to broker at port: ');
        WordToStr(EthPort, TempStr);
        AddToLog(TempStr);
      end;
    end;

    if ProcCounter = 4000 then
    begin
      Inc(ProcCounter);
      if not MQTT_CONNECT(0, 0) then
        AddToLog('Can''t prepare MQTTConnect packet.');
    end;
        
    if ProcCounter = 9000 then
    begin
      Inc(ProcCounter);
      if not MQTT_PUBLISH(0, 0, 2) then
        AddToLog('Can''t prepare MQTT_PUBLISH packet 1.');
    end;
    
    if ProcCounter = 19000 then
    begin
      Inc(ProcCounter);
      if not MQTT_PUBLISH(0, 0, 2) then
        AddToLog('Can''t prepare MQTT_PUBLISH packet 2.');
    end;

    if ProcCounter = 30000 then
    begin
      Inc(ProcCounter);
      if not MQTT_DISCONNECT(0, 0) then                         //Either after MQTT_DISCONNECT or after Net_Ethernet_Intern_disconnectTCP,
                                                                //the broker remains in FIN_WAIT2 and will not allow new connections, unless manually reset.
        AddToLog('Can''t prepare MQTTDisconnect packet.');
    end;
        
    if ProcCounter = 31000 then
    begin
      Inc(ProcCounter);
      if Net_Ethernet_Intern_disconnectTCP(FirstSocket) = 0 then
        AddToLog('Can''t disconnect.');
    end;
      
    if ProcCounter = 35000 then
    begin
      Inc(ProcCounter);
      AddToLog('done cycle.');
    end;
    
    if ProcCounter = 36000 then
      ProcCounter := 65534; //0;
    

      //if not MQTT_SUBSCRIBE(0, 0) then
      //  AddToLog('Can''t prepare MQTT_SUBSCRIBE packet.');
    
      //if not MQTT_UNSUBSCRIBE(0, 0) then
      //  AddToLog('Can''t prepare MQTT_UNSUBSCRIBE packet.');

  until False;
    
  MQTT_Done;
end.
